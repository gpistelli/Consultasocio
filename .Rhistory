a <- list(A = "abc",
B = "def",
C = "ghi")
a
list[["A"]]
a[["A"]]
a <- c(PE = "Nordeste", PI = "Nordeste", SP = "Sudeste", RS = "Sul")
a
a["PE"]
strsplit(x = "AC|AL|AM|AP|BA|CE|DF|ES|GO|MA|MG|MS|MT|PA|PB|PE|PI|PR|RJ|RN|RO|RR|RS|SC|SE|SP|TO", split = "|")
strsplit(x = "AC|AL|AM|AP|BA|CE|DF|ES|GO|MA|MG|MS|MT|PA|PB|PE|PI|PR|RJ|RN|RO|RR|RS|SC|SE|SP|TO", split = "\\|")
unlist(strsplit(x = "AC|AL|AM|AP|BA|CE|DF|ES|GO|MA|MG|MS|MT|PA|PB|PE|PI|PR|RJ|RN|RO|RR|RS|SC|SE|SP|TO", split = "\\|"))
estado_regioes <- setNames(object = c("Norte", "Nordeste", "Norte", "Norte", "Nordeste", "Nordeste", "Centro-Oeste", "Sudeste", "Centro-Oeste",
"Nordeste", "Sudeste", "Centro-Oeste", "Centro-Oeste", "Norte", "Nordeste", "Nordeste", "Nordeste",
"Sul", "Sudeste", "Nordeste", "Norte", "Norte", "Sul", "Sul", "Nordeste", "Nordeste", "Sudeste", "Norte"),
nm = unlist(strsplit(x = "AC|AL|AM|AP|BA|CE|DF|ES|GO|MA|MG|MS|MT|PA|PB|PE|PI|PR|RJ|RN|RO|RR|RS|SC|SE|SP|TO", split = "\\|")))
estado_regioes
estado_regioes[c("RR", "RS", "PE")]
CS_convert_state_to_region <- function(vec){
vec <- estado_regioes[vec]
return(vec)
}
CS_convert_state_to_region(c("PR", "PR", "PR", "SC", "SC", "RS"))
CS_convert_state_to_region(c("PR", "PR", "PR", "SC", "SC", "RS")) |> unique()
CS_convert_state_to_region(c("PR", "PR", "PR", "SC", "SC", "RS")) |> table()
CS_convert_state_to_region(c("PR", "PR", "PR", "SC", "SC", "RS", "SP", "RJ")) |> table()
CS_convert_state_to_region(c("PR", "PR", "PR", "SC", "SC", "RS", "SP", "RJ")) |> table() |> prop.table()
library(microbenchmark)
CS_convert_state_to_region1 <- function(vec){
vec <- estado_regioes[vec]
return(vec)
}
CS_convert_state_to_region <- function(vec){
vec <- vec %>% gsub("SC|RS|PR", "Sul", .) %>% gsub("SP|RJ|MG|ES", "Sudeste", .) %>% gsub("DF|GO|MS|MT", "Centro-Oeste", .) %>%
gsub("AL|BA|CE|MA|PB|PE|PI|RN|SE", "Nordeste", .) %>% gsub("AC|AP|AM|PA|RO|RR|TO", "Norte", .)
return(vec)
}
replicate(sample(x = names(estado_regioes), size = 12), n = 5)
a <- replicate(sample(x = names(estado_regioes), size = 12), n = 5)
a
a[1]
as.data.frame(a)
names(estado_regioes)
estado_regioes
estado_regioes <- setNames(object = c("Norte", "Nordeste", "Norte", "Norte", "Nordeste", "Nordeste", "Centro-Oeste", "Sudeste", "Centro-Oeste",
"Nordeste", "Sudeste", "Centro-Oeste", "Centro-Oeste", "Norte", "Nordeste", "Nordeste", "Nordeste",
"Sul", "Sudeste", "Nordeste", "Norte", "Norte", "Sul", "Sul", "Nordeste", "Sudeste", "Norte"),
nm = unlist(strsplit(x = "AC|AL|AM|AP|BA|CE|DF|ES|GO|MA|MG|MS|MT|PA|PB|PE|PI|PR|RJ|RN|RO|RR|RS|SC|SE|SP|TO", split = "\\|")))
estado_regioes
a <- list()
a[[1]] <- 12
a
a <- list()
for (i in 1:15){
a[[i]] <- sample(x = names(estado_regioes), size = 12, replace = T)
}
a
microbenchmark(lapply(X = a, FUN = CS_convert_state_to_region),
lapply(X = a, FUN = CS_convert_state_to_region1),
times = 1000)
library(magrittr)
microbenchmark(lapply(X = a, FUN = CS_convert_state_to_region),
lapply(X = a, FUN = CS_convert_state_to_region1),
times = 1000)
CS_convert_state_to_region1
1169/23
setNames(object = c(1, 2, 3, 4, 5), nm = "ABC")
setNames(object = c(1, 2, 3, 4, 5), nm = rep("ABC", 5))
setNames(object = 1:5, nm = rep("ABC", 1:5))
setNames(object = 1:5, nm = rep("ABC", length(1:5)))
cnae_vec <- c(setNames(object = 1:3, nm = rep("Agr", length(1:3))),
setNames(object = 5:9, nm = rep("Extr", length(5:9))),
setNames(object = 10:33, nm = rep("Transf", length(10:33))),
setNames(object = 35:39, nm = rep("Infra", length(35:39))),
setNames(object = 41:43, nm = rep("Constr", length(41:43))),
setNames(object = 45:47, nm = rep("Comerc", length(45:47))),
setNames(object = 49:97, nm = rep("Serv", length(49:97)))
)
cnae_vec
lista_cod_cnae <- list()
lista_cod_cnae[["Agr"]] <- c(1:3)
lista_cod_cnae[["Extr"]] <- c(5:9)
lista_cod_cnae[["Transf"]] <- c(10:33)
lista_cod_cnae[["Infra"]] <- c(35:39)
lista_cod_cnae[["Constr"]] <- c(41:43)
lista_cod_cnae[["Comerc"]] <- c(45:47)
lista_cod_cnae[["Serv"]] <- c(49:97)
CS_CNAE_conv1 <- function(vec){
vec <- cnae_vec[vec]
return(vec)
}
CS_CNAE_conv <- function(vec){
vec <- stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec) %>% as.numeric()
setor_cnae <- setNames(object = logical(length(lista_cod_cnae)), nm = names(lista_cod_cnae))
for (i in 1:length(lista_cod_cnae)){
setor_cnae[i]  <- any(vec %in% lista_cod_cnae[[i]])
}
setor_cnae <- ifelse(setor_cnae, "y", "n")
return(setor_cnae)
}
CS_CNAE_conv1 <- function(vec){
vec <- stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec) %>% as.character()
vec <- cnae_vec[vec]
return(vec)
}
CS_prep_matrix <- function(vec){
vec <- setNames(object = rep("y", length(vec)), nm = vec)
return(vec)
}
CS_CNAE_conv1 <- function(vec){
vec <- stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec) %>% as.character()
vec <- cnae_vec[vec] |> unique()
vec <- CS_prep_matrix(vec)
return(vec)
}
CS_CNAE_conv <- function(vec){
vec <- stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec) %>% as.numeric()
setor_cnae <- setNames(object = logical(length(lista_cod_cnae)), nm = names(lista_cod_cnae))
for (i in 1:length(lista_cod_cnae)){
setor_cnae[i]  <- any(vec %in% lista_cod_cnae[[i]])
}
setor_cnae <- ifelse(setor_cnae, "y", "n")
return(setor_cnae)
}
a <- list()
setor_cnae
cnae_vec
a <- list()
a
for (i in 1:100){
a[[i]]  <- paste0(sample(x = cnae_vec, size = 7), "0000")
}
a
microbenchmark(lapply(a, CS_CNAE_conv),
lapply(a, CS_CNAE_conv1),
times = 1000
)
CS_CNAE_conv1 <- function(vec){
vec <- as.character(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec))
vec <- unique(cnae_vec[vec])
vec <- CS_prep_matrix(vec)
return(vec)
}
microbenchmark(lapply(a, CS_CNAE_conv),
lapply(a, CS_CNAE_conv1),
times = 1000
)
CS_CNAE_conv <- function(vec){
vec <- as.numeric(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec))
setor_cnae <- setNames(object = logical(length(lista_cod_cnae)), nm = names(lista_cod_cnae))
for (i in 1:length(lista_cod_cnae)){
setor_cnae[i]  <- any(vec %in% lista_cod_cnae[[i]])
}
setor_cnae <- ifelse(setor_cnae, "y", "n")
return(setor_cnae)
}
microbenchmark(lapply(a, CS_CNAE_conv),
lapply(a, CS_CNAE_conv1),
times = 1000
)
lapply(a, CS_CNAE_conv1)
CS_CNAE_conv1 <- function(vec){
vec <- as.character(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec))
vec <- cnae_vec[vec]
vec <- CS_prep_matrix(vec)
return(vec)
}
lapply(a, CS_CNAE_conv1)
CS_CNAE_conv1 <- function(vec){
vec <- as.character(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec))
vec <- cnae_vec[vec]
# vec <- CS_prep_matrix(vec)
return(vec)
}
lapply(a, CS_CNAE_conv1)
lapply(a, CS_CNAE_conv)
vec <- as.character(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = a[[1]]))
vec
cnae_vec[vec]
names(cnae_vec)
cnae_vec <- c(setNames(nm = 1:3, object = rep("Agr", length(1:3))),
setNames(nm = 5:9, object = rep("Extr", length(5:9))),
setNames(nm = 10:33, object = rep("Transf", length(10:33))),
setNames(nm = 35:39, object = rep("Infra", length(35:39))),
setNames(nm = 41:43, object = rep("Constr", length(41:43))),
setNames(nm = 45:47, object = rep("Comerc", length(45:47))),
setNames(nm = 49:97, object = rep("Serv", length(49:97)))
)
cnae_vec
names(cnae_vec)
cnae_vec[vec]
CS_CNAE_conv1 <- function(vec){
vec <- as.character(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec))
vec <- unique(cnae_vec[vec])
vec <- CS_prep_matrix(vec)
return(vec)
}
vec
lapply(a, CS_CNAE_conv1)
CS_CNAE_conv1 <- function(vec){
vec <- as.character(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec))
vec <- unique(cnae_vec[vec])
vec <- CS_prep_matrix(vec)
return(vec)
}
microbenchmark(lapply(a, CS_CNAE_conv),
lapply(a, CS_CNAE_conv1),
times = 1000
)
CS_CNAE_conv1 <- function(vec){
vec <- as.character(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec))
vec <- unique(cnae_vec[vec])
return(vec)
}
microbenchmark(lapply(a, CS_CNAE_conv),
lapply(a, CS_CNAE_conv1),
times = 1000
)
#' Convert CNAE code
#'
#' Convert the business CNAE to our dictionary (check `lista_cod_CNAE` object)
#'
#' @param vec A vector with businesses CNAEs, preferably collected from CS_get_bus_df
#' @return A named vector with CNAEs sector and character values indicating `yes` or `no`
#' @examples
#' CS_CNAE_conv(CS_get_CNAE(df$Atividade.econÃ´mica))
#'
#' @export
CS_CNAE_conv <- function(vec){
vec <- as.character(stringr::str_extract(pattern = "^[:digit:][:digit:]?", string = vec))
vec <- cnae_vec[vec]
return(vec)
}
unlist(lapply(a, CS_CNAE_conv)) |> table() |> prop.table()
library(devtools)
use_data(cnae_vec, estado_regioes, internal = T)
rm(cnae_vec)
rm(estado_regioes)
load("C:/Users/gabri/Documents/R/Projects/Consultasocio/Consultasocio/R/sysdata.rda")
cnae_vec
library(devtools)
library(usethis)
# Data.frame base
base_df_reg <- as.data.frame(matrix(nrow = 0, ncol = 16))
names(base_df_reg) <- c("N_Emp", "Maior_n_Func", "Maior_Fat", "KSoc", "Agr", "Extr", "Transf", "Infra", "Constr",
"Comerc", "Serv", "Norte", "Nordeste", "Centro-Oeste", "Sudeste", "Sul")
base_df_reg[1:16] <- lapply(base_df_reg[1:16], as.character)
usethis::use_data(base_df_reg, internal = T)
usethis::use_data(base_df_reg, cnae_vec, estado_regioes, internal = T, overwrite = T)
library(dplyr)
library(stringr)
str_split(string = c("AB:DF", "FG:KL", "GH:FG"), pattern = ":")
strsplit(string = c("AB:DF", "FG:KL", "GH:FG"), pattern = ":")
strsplit(x = c("AB:DF", "FG:KL", "GH:FG"), split = ":")
library(rvest)
cnae_vec
unique(cnae_vec)
unique(estado_regioes)
base_df_reg[c("Agr", "Extr", "Transf", "Infra", "Constr", "Comerc", "Serv",
"Norte", "Nordeste", "Centro-Oeste", "Sudeste", "Sul")]
devtools::document()
devtools::document()
rm(list = c("CS_CNAE_conv", "CS_convert_state_to_region", "CS_prep_matrix"))
devtools::document()
devtools::document()
?.
?CS_prep_matrix
?Consultasocio
??Consultasocio
?CS_get_bus_states
library(usethis)
use_pipe()
use_agpl3_license()
devtools::document()
devtools::document()
devtools::document()
library(Consultasocio)
?CS_read_board_csv
library(usethis)
use_gpl3_license()
